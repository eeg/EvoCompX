EvoCompX: evolution and competition across space

Version 0.3, Oct 2013
Emma Goldberg <eeg@uic.edu>

This program implements the model of Case and Taper (2000, AmNat), with some
extensions.  In particular, any number of species can be used, and competition
coefficients can be specified.  The phenotype-independent hybridization from
Goldberg and Lande (2006) is also included.  Now also constant (non-evolving)
plasticity.  See the end of this file for major limitations.


Step 1: Compile the program
---------------------------

On Linux/Unix-like systems, probably Mac OS X, and maybe Windows with cygwin,
compilation from a terminal ($ is the prompt) is as simple as:
   $ cd src/
   $ make
If you use an IDE or some other environment, you're on your own.

As a first check, run the executable without any options:
   $ ./EvoCompX
You should see a message saying that input parameters are needed.


Step 2: Run the example
---------------------------

Move to the directory with input examples:
   $ cd ../input/

Take a look at the file params.in.  It includes all the parameters that can be
specified.  The notation mostly follows Case and Taper (2000).  Some of the
parameters have default values, but for most of them, you'll get a warning
message if any are unspecified.

num_species:      need at least 2 species, and currently no more than 20
r, K:             parameters of the logistic growth model
h2:               heritability
V_s, V_p, V_u:    variances of the stabilizing selection, phenotypic, and 
                    competition functions
alpha_file:       a file containing the matrix of competition coefficients,
                    alpha[row i][col j] = alpha_ij = effect of j on i;
                    values should be separated by whitespace
beta:             frequency-independent hybridization
delta:            probability of dispersal to a neighboring cell
bbar:             plasticity (slope of reaction norm)
space_size:       number of spatial cells, currently no more than 1000
opt_slope:        the optimum phenotype function is currently a line with 0 
                    intercept and this slope [theta(x)]
start_t:          the starting time (useful to change if you want to continue a
                    previous run)
stop_t:           the stopping time; the number of time steps to be run is 
                    stop_t - start_t
record_interval:  after this many time steps, the results are written to files
initial_num, initial_abar:  files with initial conditions

Initial conditions can be completely arbitrary.  The file specified by
initial_num should contain the initial abundances, with one column per species
and one row per spatial cell.  Similarly for initial_abar and the initial mean
breeding values.  These can be written by hand, or generated with the
make_initial.py or make_initial.R scripts included or any other script you want
to write (e.g. randomly tossing individuals onto the landscape).

To run the included three-species example:

Generate the initial condition files num.in and zbar.in:
   $ ./make_initial.py

Generate a file with a competition coefficient matrix, alpha.in:
   $ ./make_alpha.py 0.5
(If a number is specificed [0.5 here], that will be the value of all the a_ij
elements.  If no number is given, random values will be chosen.)

Run the program, generating several output files:
   $ ../src/EvoCompX params.in

You now have:
   time.dat: the times at which the system state was recorded
   num1.dat, num2.dat, num3.dat: the abundances of each species at each location
      and each time of record; one line per time, one column per spatial cell
   zbar1.dat, zbar2.dat, zbar3.dat: same for the mean phenotypes of each species
   abar1.dat, abar2.dat, abar3.dat: same for the mean breeding value of each
      species
   num_final.dat, abar_final.dat: the state of the system at the last time; the
      format of each file is the same as for the input files, so it is easy to
      continue runs

As an example of how to visualize at the output, see output/plot_results.R:
   $ mv *.dat ../output/
   $ cd ../output/
   $ R --no-save < plot_results.R
The file generated is results.pdf.


Step 3: General use
---------------------------

All options can be controlled through the input parameter file, an example of
which is input/params.in.  Such a file must always be the first argument.
Additionally, any of the parameters can be specified on the command line (with
no spaces on either side of the = sign), and those values will override what's 
in the input file.  This can be useful when using a script to run many 
scenarios.  For example:
   $ ../src/EvoCompX params.in opt_slope=0.4 delta=0.01

Hugely increasing the number of species, number of spatial cells, or elapsed
time could lead to slow run times.  So best to increase those just gradually.
If more than 20 species or 1000 cells are needed, the space array must be
allocated dynamically.

Here are some of the current limitations in the code.  All of these can be
changed if that would be useful.

(a) The value for a given parameter is the same for each species, e.g. all
species have the same K.  FIXED: species-specific parameter values can now be
specified.  

(b) The value for a given parameter is the same everywhere in space.

(c) The maximum dispersal distance is one cell per generation.  I experimented
with arbitrary dispersal kernels, but that got messy.  A simpler alternative is
to let nearest-neighbor dispersal happen a specified number of times per
generation.

(d) Dispersal is symmetric: the probability of moving left is the same as the
probability of moving right.

(e) Competition is symmetric by phenotype.  To change that (e.g. so larger-z
individuals have a larger effect on smaller-z individuals than vice versa,
regardless of their species), one could use a different competition 
distribution (like Case and Taper's kappa).

(f) The optimum phenotype function, theta(x), so far is just a straight line,
but it could be made into anything.  Modifications can be hard-coded in
optimum.c, or a few general cases can be specified there and appropriate
parameters created.

(g) Selection must be weak, meaning that the cline can't be too steep,
dispersal too far, or the selection function too narrow.  Changing this
requires obtaining the Wrightian fitness numerically rather than through the
current analytical approximation.  This would slow the analysis down a bit, but
it is probably worth doing.


Disclaimer
---------------------------

My older, two-species version of this code was well-tested and gave every
indication of working properly.  I have only tested this multi-species version
briefly -- it appears to work fine, but please keep an eye out for weird
behavior (even with two species, since some of the code had to be re-written).
